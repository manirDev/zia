#ifndef ZAI_SCANNER_H
#define ZAI_SCANNER_H
#include "common/common.h"
#include "common/commonTypes.h"

typedef enum
{
    //Single-character tokens
    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,
    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,

    // One or two character tokens
    TOKEN_BANG, TOKEN_BANG_EQUAL,
    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL,
    TOKEN_LESS, TOKEN_LESS_EQUAL,
    
    // Literals
    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,

    //Keywords
    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,
    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NULL, TOKEN_OR,
    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,
    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,

    //Extra added tokens
    TOKEN_COLON, TOKEN_QUESTION, TOKEN_ELSE_IF, TOKEN_PERCENT,
    TOKEN_MINUS_MINUS_POSTFIX, TOKEN_MINUS_MINUS_PREFIX, TOKEN_MINUS_EQUAL, 
    TOKEN_PLUS_PLUS_POSTFIX, TOKEN_PLUS_PLUS_PREFIX, TOKEN_PLUS_EQUAL,
    TOKEN_SLASH_EQUAL, TOKEN_STAR_EQUAL, TOKEN_STAR_STAR,
    TOKEN_BREAK, TOKEN_CONTINUE,

    TOKEN_ERROR, TOKEN_EOF,
}TokenType;

typedef struct
{
   TokenType type;
   const ZChar* start;
   ZInt32 length;
   ZInt32 line;
}Token;

void initScanner(const ZChar* source);
Token scanToken();

#endif
